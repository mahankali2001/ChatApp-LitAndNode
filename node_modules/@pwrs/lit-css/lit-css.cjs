var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/lilconfig/src/index.js
var require_src = __commonJS({
  "node_modules/lilconfig/src/index.js"(exports2, module2) {
    var path = require("path");
    var fs = require("fs");
    var os = require("os");
    var url = require("url");
    var fsReadFileAsync = fs.promises.readFile;
    function getDefaultSearchPlaces(name, sync) {
      return [
        "package.json",
        `.${name}rc.json`,
        `.${name}rc.js`,
        `.${name}rc.cjs`,
        ...sync ? [] : [`.${name}rc.mjs`],
        `.config/${name}rc`,
        `.config/${name}rc.json`,
        `.config/${name}rc.js`,
        `.config/${name}rc.cjs`,
        ...sync ? [] : [`.config/${name}rc.mjs`],
        `${name}.config.js`,
        `${name}.config.cjs`,
        ...sync ? [] : [`${name}.config.mjs`]
      ];
    }
    function parentDir(p) {
      return path.dirname(p) || path.sep;
    }
    var jsonLoader = (_, content) => JSON.parse(content);
    var requireFunc = typeof __webpack_require__ === "function" ? __non_webpack_require__ : require;
    var defaultLoadersSync = Object.freeze({
      ".js": requireFunc,
      ".json": requireFunc,
      ".cjs": requireFunc,
      noExt: jsonLoader
    });
    module2.exports.defaultLoadersSync = defaultLoadersSync;
    var dynamicImport = async (id) => {
      try {
        const fileUrl = url.pathToFileURL(id).href;
        const mod = await import(
          /* webpackIgnore: true */
          fileUrl
        );
        return mod.default;
      } catch (e) {
        try {
          return requireFunc(id);
        } catch (requireE) {
          if (requireE.code === "ERR_REQUIRE_ESM" || requireE instanceof SyntaxError && requireE.toString().includes("Cannot use import statement outside a module")) {
            throw e;
          }
          throw requireE;
        }
      }
    };
    var defaultLoaders = Object.freeze({
      ".js": dynamicImport,
      ".mjs": dynamicImport,
      ".cjs": dynamicImport,
      ".json": jsonLoader,
      noExt: jsonLoader
    });
    module2.exports.defaultLoaders = defaultLoaders;
    function getOptions(name, options, sync) {
      const conf = {
        stopDir: os.homedir(),
        searchPlaces: getDefaultSearchPlaces(name, sync),
        ignoreEmptySearchPlaces: true,
        cache: true,
        transform: (x) => x,
        packageProp: [name],
        ...options,
        loaders: {
          ...sync ? defaultLoadersSync : defaultLoaders,
          ...options.loaders
        }
      };
      conf.searchPlaces.forEach((place) => {
        const key = path.extname(place) || "noExt";
        const loader = conf.loaders[key];
        if (!loader) {
          throw new Error(`Missing loader for extension "${place}"`);
        }
        if (typeof loader !== "function") {
          throw new Error(
            `Loader for extension "${place}" is not a function: Received ${typeof loader}.`
          );
        }
      });
      return conf;
    }
    function getPackageProp(props, obj) {
      if (typeof props === "string" && props in obj) return obj[props];
      return (Array.isArray(props) ? props : props.split(".")).reduce(
        (acc, prop) => acc === void 0 ? acc : acc[prop],
        obj
      ) || null;
    }
    function validateFilePath(filepath) {
      if (!filepath) throw new Error("load must pass a non-empty string");
    }
    function validateLoader(loader, ext) {
      if (!loader) throw new Error(`No loader specified for extension "${ext}"`);
      if (typeof loader !== "function") throw new Error("loader is not a function");
    }
    var makeEmplace = (enableCache) => (c, filepath, res) => {
      if (enableCache) c.set(filepath, res);
      return res;
    };
    module2.exports.lilconfig = function lilconfig(name, options) {
      const {
        ignoreEmptySearchPlaces,
        loaders,
        packageProp,
        searchPlaces,
        stopDir,
        transform: transform2,
        cache
      } = getOptions(name, options != null ? options : {}, false);
      const searchCache = /* @__PURE__ */ new Map();
      const loadCache = /* @__PURE__ */ new Map();
      const emplace = makeEmplace(cache);
      return {
        async search(searchFrom = process.cwd()) {
          const result = {
            config: null,
            filepath: ""
          };
          const visited = /* @__PURE__ */ new Set();
          let dir = searchFrom;
          dirLoop: while (true) {
            if (cache) {
              const r = searchCache.get(dir);
              if (r !== void 0) {
                for (const p of visited) searchCache.set(p, r);
                return r;
              }
              visited.add(dir);
            }
            for (const searchPlace of searchPlaces) {
              const filepath = path.join(dir, searchPlace);
              try {
                await fs.promises.access(filepath);
              } catch (e) {
                continue;
              }
              const content = String(await fsReadFileAsync(filepath));
              const loaderKey = path.extname(searchPlace) || "noExt";
              const loader = loaders[loaderKey];
              if (searchPlace === "package.json") {
                const pkg = await loader(filepath, content);
                const maybeConfig = getPackageProp(packageProp, pkg);
                if (maybeConfig != null) {
                  result.config = maybeConfig;
                  result.filepath = filepath;
                  break dirLoop;
                }
                continue;
              }
              const isEmpty = content.trim() === "";
              if (isEmpty && ignoreEmptySearchPlaces) continue;
              if (isEmpty) {
                result.isEmpty = true;
                result.config = void 0;
              } else {
                validateLoader(loader, loaderKey);
                result.config = await loader(filepath, content);
              }
              result.filepath = filepath;
              break dirLoop;
            }
            if (dir === stopDir || dir === parentDir(dir)) break dirLoop;
            dir = parentDir(dir);
          }
          const transformed = (
            // not found
            result.filepath === "" && result.config === null ? transform2(null) : transform2(result)
          );
          if (cache) {
            for (const p of visited) searchCache.set(p, transformed);
          }
          return transformed;
        },
        async load(filepath) {
          validateFilePath(filepath);
          const absPath = path.resolve(process.cwd(), filepath);
          if (cache && loadCache.has(absPath)) {
            return loadCache.get(absPath);
          }
          const { base, ext } = path.parse(absPath);
          const loaderKey = ext || "noExt";
          const loader = loaders[loaderKey];
          validateLoader(loader, loaderKey);
          const content = String(await fsReadFileAsync(absPath));
          if (base === "package.json") {
            const pkg = await loader(absPath, content);
            return emplace(
              loadCache,
              absPath,
              transform2({
                config: getPackageProp(packageProp, pkg),
                filepath: absPath
              })
            );
          }
          const result = {
            config: null,
            filepath: absPath
          };
          const isEmpty = content.trim() === "";
          if (isEmpty && ignoreEmptySearchPlaces)
            return emplace(
              loadCache,
              absPath,
              transform2({
                config: void 0,
                filepath: absPath,
                isEmpty: true
              })
            );
          result.config = isEmpty ? void 0 : await loader(absPath, content);
          return emplace(
            loadCache,
            absPath,
            transform2(isEmpty ? { ...result, isEmpty, config: void 0 } : result)
          );
        },
        clearLoadCache() {
          if (cache) loadCache.clear();
        },
        clearSearchCache() {
          if (cache) searchCache.clear();
        },
        clearCaches() {
          if (cache) {
            loadCache.clear();
            searchCache.clear();
          }
        }
      };
    };
    module2.exports.lilconfigSync = function lilconfigSync(name, options) {
      const {
        ignoreEmptySearchPlaces,
        loaders,
        packageProp,
        searchPlaces,
        stopDir,
        transform: transform2,
        cache
      } = getOptions(name, options != null ? options : {}, true);
      const searchCache = /* @__PURE__ */ new Map();
      const loadCache = /* @__PURE__ */ new Map();
      const emplace = makeEmplace(cache);
      return {
        search(searchFrom = process.cwd()) {
          const result = {
            config: null,
            filepath: ""
          };
          const visited = /* @__PURE__ */ new Set();
          let dir = searchFrom;
          dirLoop: while (true) {
            if (cache) {
              const r = searchCache.get(dir);
              if (r !== void 0) {
                for (const p of visited) searchCache.set(p, r);
                return r;
              }
              visited.add(dir);
            }
            for (const searchPlace of searchPlaces) {
              const filepath = path.join(dir, searchPlace);
              try {
                fs.accessSync(filepath);
              } catch (e) {
                continue;
              }
              const loaderKey = path.extname(searchPlace) || "noExt";
              const loader = loaders[loaderKey];
              const content = String(fs.readFileSync(filepath));
              if (searchPlace === "package.json") {
                const pkg = loader(filepath, content);
                const maybeConfig = getPackageProp(packageProp, pkg);
                if (maybeConfig != null) {
                  result.config = maybeConfig;
                  result.filepath = filepath;
                  break dirLoop;
                }
                continue;
              }
              const isEmpty = content.trim() === "";
              if (isEmpty && ignoreEmptySearchPlaces) continue;
              if (isEmpty) {
                result.isEmpty = true;
                result.config = void 0;
              } else {
                validateLoader(loader, loaderKey);
                result.config = loader(filepath, content);
              }
              result.filepath = filepath;
              break dirLoop;
            }
            if (dir === stopDir || dir === parentDir(dir)) break dirLoop;
            dir = parentDir(dir);
          }
          const transformed = (
            // not found
            result.filepath === "" && result.config === null ? transform2(null) : transform2(result)
          );
          if (cache) {
            for (const p of visited) searchCache.set(p, transformed);
          }
          return transformed;
        },
        load(filepath) {
          validateFilePath(filepath);
          const absPath = path.resolve(process.cwd(), filepath);
          if (cache && loadCache.has(absPath)) {
            return loadCache.get(absPath);
          }
          const { base, ext } = path.parse(absPath);
          const loaderKey = ext || "noExt";
          const loader = loaders[loaderKey];
          validateLoader(loader, loaderKey);
          const content = String(fs.readFileSync(absPath));
          if (base === "package.json") {
            const pkg = loader(absPath, content);
            return transform2({
              config: getPackageProp(packageProp, pkg),
              filepath: absPath
            });
          }
          const result = {
            config: null,
            filepath: absPath
          };
          const isEmpty = content.trim() === "";
          if (isEmpty && ignoreEmptySearchPlaces)
            return emplace(
              loadCache,
              absPath,
              transform2({
                filepath: absPath,
                config: void 0,
                isEmpty: true
              })
            );
          result.config = isEmpty ? void 0 : loader(absPath, content);
          return emplace(
            loadCache,
            absPath,
            transform2(isEmpty ? { ...result, isEmpty, config: void 0 } : result)
          );
        },
        clearLoadCache() {
          if (cache) loadCache.clear();
        },
        clearSearchCache() {
          if (cache) searchCache.clear();
        },
        clearCaches() {
          if (cache) {
            loadCache.clear();
            searchCache.clear();
          }
        }
      };
    };
  }
});

// node_modules/css-declaration-sorter/dist/main.cjs
var require_main = __commonJS({
  "node_modules/css-declaration-sorter/dist/main.cjs"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var shorthandData = {
      "animation": [
        "animation-name",
        "animation-duration",
        "animation-timing-function",
        "animation-delay",
        "animation-iteration-count",
        "animation-direction",
        "animation-fill-mode",
        "animation-play-state"
      ],
      "background": [
        "background-image",
        "background-size",
        "background-position",
        "background-repeat",
        "background-origin",
        "background-clip",
        "background-attachment",
        "background-color"
      ],
      "columns": [
        "column-width",
        "column-count"
      ],
      "column-rule": [
        "column-rule-width",
        "column-rule-style",
        "column-rule-color"
      ],
      "flex": [
        "flex-grow",
        "flex-shrink",
        "flex-basis"
      ],
      "flex-flow": [
        "flex-direction",
        "flex-wrap"
      ],
      "font": [
        "font-style",
        "font-variant",
        "font-weight",
        "font-stretch",
        "font-size",
        "font-family",
        "line-height"
      ],
      "gap": [
        "column-gap",
        "row-gap"
      ],
      "grid": [
        "grid-template-rows",
        "grid-template-columns",
        "grid-template-areas",
        "grid-auto-rows",
        "grid-auto-columns",
        "grid-auto-flow",
        "column-gap",
        "row-gap"
      ],
      "grid-area": [
        "grid-row-start",
        "grid-column-start",
        "grid-row-end",
        "grid-column-end"
      ],
      "grid-column": [
        "grid-column-start",
        "grid-column-end"
      ],
      "grid-row": [
        "grid-row-start",
        "grid-row-end"
      ],
      "grid-template": [
        "grid-template-columns",
        "grid-template-rows",
        "grid-template-areas"
      ],
      "list-style": [
        "list-style-type",
        "list-style-position",
        "list-style-image"
      ],
      "offset": [
        "offset-anchor",
        "offset-distance",
        "offset-path",
        "offset-position",
        "offset-rotate"
      ],
      "padding": [
        "padding-block",
        "padding-block-start",
        "padding-block-end",
        "padding-inline",
        "padding-inline-start",
        "padding-inline-end",
        "padding-top",
        "padding-right",
        "padding-bottom",
        "padding-left"
      ],
      "padding-block": [
        "padding-block-start",
        "padding-block-end",
        "padding-top",
        "padding-right",
        "padding-bottom",
        "padding-left"
      ],
      "padding-block-start": [
        "padding-top",
        "padding-right",
        "padding-left"
      ],
      "padding-block-end": [
        "padding-right",
        "padding-bottom",
        "padding-left"
      ],
      "padding-inline": [
        "padding-inline-start",
        "padding-inline-end",
        "padding-top",
        "padding-right",
        "padding-bottom",
        "padding-left"
      ],
      "padding-inline-start": [
        "padding-top",
        "padding-right",
        "padding-left"
      ],
      "padding-inline-end": [
        "padding-right",
        "padding-bottom",
        "padding-left"
      ],
      "margin": [
        "margin-block",
        "margin-block-start",
        "margin-block-end",
        "margin-inline",
        "margin-inline-start",
        "margin-inline-end",
        "margin-top",
        "margin-right",
        "margin-bottom",
        "margin-left"
      ],
      "margin-block": [
        "margin-block-start",
        "margin-block-end",
        "margin-top",
        "margin-right",
        "margin-bottom",
        "margin-left"
      ],
      "margin-inline": [
        "margin-inline-start",
        "margin-inline-end",
        "margin-top",
        "margin-right",
        "margin-bottom",
        "margin-left"
      ],
      "margin-inline-start": [
        "margin-top",
        "margin-right",
        "margin-bottom",
        "margin-left"
      ],
      "margin-inline-end": [
        "margin-top",
        "margin-right",
        "margin-bottom",
        "margin-left"
      ],
      "border": [
        "border-top",
        "border-right",
        "border-bottom",
        "border-left",
        "border-width",
        "border-style",
        "border-color",
        "border-top-width",
        "border-right-width",
        "border-bottom-width",
        "border-left-width",
        "border-inline-start-width",
        "border-inline-end-width",
        "border-block-start-width",
        "border-block-end-width",
        "border-top-style",
        "border-right-style",
        "border-bottom-style",
        "border-left-style",
        "border-inline-start-style",
        "border-inline-end-style",
        "border-block-start-style",
        "border-block-end-style",
        "border-top-color",
        "border-right-color",
        "border-bottom-color",
        "border-left-color",
        "border-inline-start-color",
        "border-inline-end-color",
        "border-block-start-color",
        "border-block-end-color",
        "border-block",
        "border-block-start",
        "border-block-end",
        "border-block-width",
        "border-block-style",
        "border-block-color",
        "border-inline",
        "border-inline-start",
        "border-inline-end",
        "border-inline-width",
        "border-inline-style",
        "border-inline-color"
      ],
      "border-top": [
        "border-width",
        "border-style",
        "border-color",
        "border-top-width",
        "border-top-style",
        "border-top-color"
      ],
      "border-right": [
        "border-width",
        "border-style",
        "border-color",
        "border-right-width",
        "border-right-style",
        "border-right-color"
      ],
      "border-bottom": [
        "border-width",
        "border-style",
        "border-color",
        "border-bottom-width",
        "border-bottom-style",
        "border-bottom-color"
      ],
      "border-left": [
        "border-width",
        "border-style",
        "border-color",
        "border-left-width",
        "border-left-style",
        "border-left-color"
      ],
      "border-color": [
        "border-top-color",
        "border-bottom-color",
        "border-left-color",
        "border-right-color",
        "border-inline-start-color",
        "border-inline-end-color",
        "border-block-start-color",
        "border-block-end-color"
      ],
      "border-width": [
        "border-top-width",
        "border-bottom-width",
        "border-left-width",
        "border-right-width",
        "border-inline-start-width",
        "border-inline-end-width",
        "border-block-start-width",
        "border-block-end-width"
      ],
      "border-style": [
        "border-top-style",
        "border-bottom-style",
        "border-left-style",
        "border-right-style",
        "border-inline-start-style",
        "border-inline-end-style",
        "border-block-start-style",
        "border-block-end-style"
      ],
      "border-radius": [
        "border-top-right-radius",
        "border-top-left-radius",
        "border-bottom-right-radius",
        "border-bottom-left-radius",
        "border-end-end-radius",
        "border-end-start-radius",
        "border-start-end-radius",
        "border-start-start-radius"
      ],
      "border-block": [
        "border-block-start",
        "border-block-end",
        "border-block-width",
        "border-width",
        "border-block-style",
        "border-style",
        "border-block-color",
        "border-color"
      ],
      "border-block-start": [
        "border-block-start-width",
        "border-width",
        "border-block-start-style",
        "border-style",
        "border-block-start-color",
        "border-color"
      ],
      "border-block-end": [
        "border-block-end-width",
        "border-width",
        "border-block-end-style",
        "border-style",
        "border-block-end-color",
        "border-color"
      ],
      "border-inline": [
        "border-inline-start",
        "border-inline-end",
        "border-inline-width",
        "border-width",
        "border-inline-style",
        "border-style",
        "border-inline-color",
        "border-color"
      ],
      "border-inline-start": [
        "border-inline-start-width",
        "border-width",
        "border-inline-start-style",
        "border-style",
        "border-inline-start-color",
        "border-color"
      ],
      "border-inline-end": [
        "border-inline-end-width",
        "border-width",
        "border-inline-end-style",
        "border-style",
        "border-inline-end-color",
        "border-color"
      ],
      "border-image": [
        "border-image-source",
        "border-image-slice",
        "border-image-width",
        "border-image-outset",
        "border-image-repeat"
      ],
      "mask": [
        "mask-image",
        "mask-mode",
        "mask-position",
        "mask-size",
        "mask-repeat",
        "mask-origin",
        "mask-clip",
        "mask-composite"
      ],
      "inline-size": [
        "width",
        "height"
      ],
      "block-size": [
        "width",
        "height"
      ],
      "max-inline-size": [
        "max-width",
        "max-height"
      ],
      "max-block-size": [
        "max-width",
        "max-height"
      ],
      "inset": [
        "inset-block",
        "inset-block-start",
        "inset-block-end",
        "inset-inline",
        "inset-inline-start",
        "inset-inline-end",
        "top",
        "right",
        "bottom",
        "left"
      ],
      "inset-block": [
        "inset-block-start",
        "inset-block-end",
        "top",
        "right",
        "bottom",
        "left"
      ],
      "inset-inline": [
        "inset-inline-start",
        "inset-inline-end",
        "top",
        "right",
        "bottom",
        "left"
      ],
      "outline": [
        "outline-color",
        "outline-style",
        "outline-width"
      ],
      "overflow": [
        "overflow-x",
        "overflow-y"
      ],
      "place-content": [
        "align-content",
        "justify-content"
      ],
      "place-items": [
        "align-items",
        "justify-items"
      ],
      "place-self": [
        "align-self",
        "justify-self"
      ],
      "text-decoration": [
        "text-decoration-color",
        "text-decoration-style",
        "text-decoration-line"
      ],
      "transition": [
        "transition-delay",
        "transition-duration",
        "transition-property",
        "transition-timing-function"
      ],
      "text-emphasis": [
        "text-emphasis-style",
        "text-emphasis-color"
      ],
      "font-synthesis": [
        "font-synthesis-weight",
        "font-synthesis-style",
        "font-synthesis-small-caps",
        "font-synthesis-position"
      ]
    };
    function bubbleSort(list, comparator) {
      let upperIndex = list.length - 1;
      while (upperIndex > 0) {
        let swapIndex = 0;
        for (let i = 0; i < upperIndex; i += 1) {
          if (comparator(list[i], list[i + 1]) > 0) {
            const temp = list[i + 1];
            list[i + 1] = list[i];
            list[i] = temp;
            swapIndex = i;
          }
        }
        upperIndex = swapIndex;
      }
      return list;
    }
    function __variableDynamicImportRuntime0__(path) {
      switch (path) {
        case "../orders/alphabetical.mjs":
          return Promise.resolve().then(function() {
            return alphabetical;
          });
        case "../orders/concentric-css.mjs":
          return Promise.resolve().then(function() {
            return concentricCss;
          });
        case "../orders/smacss.mjs":
          return Promise.resolve().then(function() {
            return smacss;
          });
        default:
          return new Promise(function(resolve, reject) {
            (typeof queueMicrotask === "function" ? queueMicrotask : setTimeout)(
              reject.bind(null, new Error("Unknown variable dynamic import: " + path))
            );
          });
      }
    }
    var builtInOrders = [
      "alphabetical",
      "concentric-css",
      "smacss"
    ];
    var cssDeclarationSorter = ({ order = "alphabetical", keepOverrides = false } = {}) => ({
      postcssPlugin: "css-declaration-sorter",
      OnceExit(css) {
        let withKeepOverrides = (comparator) => comparator;
        if (keepOverrides) {
          withKeepOverrides = withOverridesComparator(shorthandData);
        }
        if (typeof order === "function") {
          return processCss({ css, comparator: withKeepOverrides(order) });
        }
        if (!builtInOrders.includes(order))
          return Promise.reject(
            Error([
              `Invalid built-in order '${order}' provided.`,
              `Available built-in orders are: ${builtInOrders}`
            ].join("\n"))
          );
        return __variableDynamicImportRuntime0__(`../orders/${order}.mjs`).then(({ properties: properties2 }) => processCss({
          css,
          comparator: withKeepOverrides(orderComparator(properties2))
        }));
      }
    });
    cssDeclarationSorter.postcss = true;
    function processCss({ css, comparator }) {
      const comments = [];
      const rulesCache = [];
      css.walk((node) => {
        const nodes = node.nodes;
        const type = node.type;
        if (type === "comment") {
          const isNewlineNode = node.raws.before && node.raws.before.includes("\n");
          const lastNewlineNode = isNewlineNode && !node.next();
          const onlyNode = !node.prev() && !node.next() || !node.parent;
          if (lastNewlineNode || onlyNode || node.parent.type === "root") {
            return;
          }
          if (isNewlineNode) {
            const pairedNode = node.next() || node.prev();
            if (pairedNode) {
              comments.unshift({
                "comment": node,
                "pairedNode": pairedNode,
                "insertPosition": node.next() ? "Before" : "After"
              });
              node.remove();
            }
          } else {
            const pairedNode = node.prev() || node.next();
            if (pairedNode) {
              comments.push({
                "comment": node,
                "pairedNode": pairedNode,
                "insertPosition": "After"
              });
              node.remove();
            }
          }
          return;
        }
        const isRule = type === "rule" || type === "atrule";
        if (isRule && nodes && nodes.length > 1) {
          rulesCache.push(nodes);
        }
      });
      rulesCache.forEach((nodes) => {
        sortCssDeclarations({ nodes, comparator });
      });
      comments.forEach((node) => {
        const pairedNode = node.pairedNode;
        node.comment.remove();
        pairedNode.parent && pairedNode.parent["insert" + node.insertPosition](pairedNode, node.comment);
      });
    }
    function sortCssDeclarations({ nodes, comparator }) {
      bubbleSort(nodes, (a, b) => {
        if (a.type === "decl" && b.type === "decl") {
          return comparator(a.prop, b.prop);
        } else {
          return compareDifferentType(a, b);
        }
      });
    }
    function withOverridesComparator(shorthandData2) {
      return function(comparator) {
        return function(a, b) {
          a = removeVendorPrefix(a);
          b = removeVendorPrefix(b);
          if (shorthandData2[a] && shorthandData2[a].includes(b)) return 0;
          if (shorthandData2[b] && shorthandData2[b].includes(a)) return 0;
          return comparator(a, b);
        };
      };
    }
    function orderComparator(order) {
      return function(a, b) {
        const bIndex = order.indexOf(b);
        if (bIndex === -1) {
          return 0;
        }
        return order.indexOf(a) - bIndex;
      };
    }
    function compareDifferentType(a, b) {
      if (b.type === "atrule" || a.type === "atrule") {
        return 0;
      }
      return a.type === "decl" ? -1 : b.type === "decl" ? 1 : 0;
    }
    function removeVendorPrefix(property) {
      return property.replace(/^-\w+-/, "");
    }
    var properties$2 = [
      "all",
      "-webkit-line-clamp",
      "-webkit-text-fill-color",
      "-webkit-text-stroke",
      "-webkit-text-stroke-color",
      "-webkit-text-stroke-width",
      "accent-color",
      "align-content",
      "align-items",
      "align-self",
      "animation",
      "animation-composition",
      "animation-delay",
      "animation-direction",
      "animation-duration",
      "animation-fill-mode",
      "animation-iteration-count",
      "animation-name",
      "animation-play-state",
      "animation-timing-function",
      "appearance",
      "ascent-override",
      "aspect-ratio",
      "backdrop-filter",
      "backface-visibility",
      "background",
      "background-attachment",
      "background-blend-mode",
      "background-clip",
      "background-color",
      "background-image",
      "background-origin",
      "background-position",
      "background-position-x",
      "background-position-y",
      "background-repeat",
      "background-size",
      "baseline-source",
      "block-size",
      "border",
      "border-block",
      "border-block-color",
      "border-block-end",
      "border-block-end-color",
      "border-block-end-style",
      "border-block-end-width",
      "border-block-start",
      "border-block-start-color",
      "border-block-start-style",
      "border-block-start-width",
      "border-block-style",
      "border-block-width",
      "border-bottom",
      "border-bottom-color",
      "border-bottom-left-radius",
      "border-bottom-right-radius",
      "border-bottom-style",
      "border-bottom-width",
      "border-collapse",
      "border-color",
      "border-end-end-radius",
      "border-end-start-radius",
      "border-image",
      "border-image-outset",
      "border-image-repeat",
      "border-image-slice",
      "border-image-source",
      "border-image-width",
      "border-inline",
      "border-inline-color",
      "border-inline-end",
      "border-inline-end-color",
      "border-inline-end-style",
      "border-inline-end-width",
      "border-inline-start",
      "border-inline-start-color",
      "border-inline-start-style",
      "border-inline-start-width",
      "border-inline-style",
      "border-inline-width",
      "border-left",
      "border-left-color",
      "border-left-style",
      "border-left-width",
      "border-radius",
      "border-right",
      "border-right-color",
      "border-right-style",
      "border-right-width",
      "border-spacing",
      "border-start-end-radius",
      "border-start-start-radius",
      "border-style",
      "border-top",
      "border-top-color",
      "border-top-left-radius",
      "border-top-right-radius",
      "border-top-style",
      "border-top-width",
      "border-width",
      "bottom",
      "box-decoration-break",
      "box-shadow",
      "box-sizing",
      "break-after",
      "break-before",
      "break-inside",
      "caption-side",
      "caret-color",
      "clear",
      "clip-path",
      "color",
      "color-interpolation",
      "color-scheme",
      "column-count",
      "column-fill",
      "column-gap",
      "column-rule",
      "column-rule-color",
      "column-rule-style",
      "column-rule-width",
      "column-span",
      "column-width",
      "columns",
      "contain",
      "contain-intrinsic-height",
      "contain-intrinsic-size",
      "contain-intrinsic-width",
      "container",
      "container-name",
      "container-type",
      "content",
      "content-visibility",
      "counter-increment",
      "counter-reset",
      "counter-set",
      "cursor",
      "descent-override",
      "direction",
      "display",
      "empty-cells",
      "filter",
      "flex",
      "flex-basis",
      "flex-direction",
      "flex-flow",
      "flex-grow",
      "flex-shrink",
      "flex-wrap",
      "float",
      "font",
      "font-display",
      "font-family",
      "font-feature-settings",
      "font-kerning",
      "font-language-override",
      "font-optical-sizing",
      "font-palette",
      "font-size",
      "font-size-adjust",
      "font-stretch",
      "font-style",
      "font-synthesis",
      "font-synthesis-position",
      "font-synthesis-small-caps",
      "font-synthesis-style",
      "font-synthesis-weight",
      "font-variant",
      "font-variant-alternates",
      "font-variant-caps",
      "font-variant-east-asian",
      "font-variant-emoji",
      "font-variant-ligatures",
      "font-variant-numeric",
      "font-variant-position",
      "font-variation-settings",
      "font-weight",
      "forced-color-adjust",
      "gap",
      "grid",
      "grid-area",
      "grid-auto-columns",
      "grid-auto-flow",
      "grid-auto-rows",
      "grid-column",
      "grid-column-end",
      "grid-column-start",
      "grid-row",
      "grid-row-end",
      "grid-row-start",
      "grid-template",
      "grid-template-areas",
      "grid-template-columns",
      "grid-template-rows",
      "hanging-punctuation",
      "height",
      "hyphenate-character",
      "hyphens",
      "image-orientation",
      "image-rendering",
      "inline-size",
      "inset",
      "inset-block",
      "inset-block-end",
      "inset-block-start",
      "inset-inline",
      "inset-inline-end",
      "inset-inline-start",
      "isolation",
      "justify-content",
      "justify-items",
      "justify-self",
      "left",
      "letter-spacing",
      "line-break",
      "line-gap-override",
      "line-height",
      "list-style",
      "list-style-image",
      "list-style-position",
      "list-style-type",
      "margin",
      "margin-block",
      "margin-block-end",
      "margin-block-start",
      "margin-bottom",
      "margin-inline",
      "margin-inline-end",
      "margin-inline-start",
      "margin-left",
      "margin-right",
      "margin-top",
      "mask",
      "mask-border",
      "mask-border-outset",
      "mask-border-repeat",
      "mask-border-slice",
      "mask-border-source",
      "mask-border-width",
      "mask-clip",
      "mask-composite",
      "mask-image",
      "mask-mode",
      "mask-origin",
      "mask-position",
      "mask-repeat",
      "mask-size",
      "mask-type",
      "math-depth",
      "math-style",
      "max-block-size",
      "max-height",
      "max-inline-size",
      "max-width",
      "min-block-size",
      "min-height",
      "min-inline-size",
      "min-width",
      "mix-blend-mode",
      "object-fit",
      "object-position",
      "offset",
      "offset-anchor",
      "offset-distance",
      "offset-path",
      "offset-position",
      "offset-rotate",
      "opacity",
      "order",
      "orphans",
      "outline",
      "outline-color",
      "outline-offset",
      "outline-style",
      "outline-width",
      "overflow",
      "overflow-anchor",
      "overflow-block",
      "overflow-clip-margin",
      "overflow-inline",
      "overflow-wrap",
      "overflow-x",
      "overflow-y",
      "overscroll-behavior",
      "overscroll-behavior-block",
      "overscroll-behavior-inline",
      "overscroll-behavior-x",
      "overscroll-behavior-y",
      "padding",
      "padding-block",
      "padding-block-end",
      "padding-block-start",
      "padding-bottom",
      "padding-inline",
      "padding-inline-end",
      "padding-inline-start",
      "padding-left",
      "padding-right",
      "padding-top",
      "page",
      "page-break-after",
      "page-break-before",
      "page-break-inside",
      "paint-order",
      "perspective",
      "perspective-origin",
      "place-content",
      "place-items",
      "place-self",
      "pointer-events",
      "position",
      "print-color-adjust",
      "quotes",
      "resize",
      "right",
      "rotate",
      "row-gap",
      "ruby-position",
      "scale",
      "scroll-behavior",
      "scroll-margin",
      "scroll-margin-block",
      "scroll-margin-block-end",
      "scroll-margin-block-start",
      "scroll-margin-bottom",
      "scroll-margin-inline",
      "scroll-margin-inline-end",
      "scroll-margin-inline-start",
      "scroll-margin-left",
      "scroll-margin-right",
      "scroll-margin-top",
      "scroll-padding",
      "scroll-padding-block",
      "scroll-padding-block-end",
      "scroll-padding-block-start",
      "scroll-padding-bottom",
      "scroll-padding-inline",
      "scroll-padding-inline-end",
      "scroll-padding-inline-start",
      "scroll-padding-left",
      "scroll-padding-right",
      "scroll-padding-top",
      "scroll-snap-align",
      "scroll-snap-stop",
      "scroll-snap-type",
      "scrollbar-color",
      "scrollbar-gutter",
      "scrollbar-width",
      "shape-image-threshold",
      "shape-margin",
      "shape-outside",
      "size-adjust",
      "src",
      "tab-size",
      "table-layout",
      "text-align",
      "text-align-last",
      "text-combine-upright",
      "text-decoration",
      "text-decoration-color",
      "text-decoration-line",
      "text-decoration-skip-ink",
      "text-decoration-style",
      "text-decoration-thickness",
      "text-emphasis",
      "text-emphasis-color",
      "text-emphasis-position",
      "text-emphasis-style",
      "text-indent",
      "text-justify",
      "text-orientation",
      "text-overflow",
      "text-rendering",
      "text-shadow",
      "text-transform",
      "text-underline-offset",
      "text-underline-position",
      "text-wrap",
      "top",
      "touch-action",
      "transform",
      "transform-box",
      "transform-origin",
      "transform-style",
      "transition",
      "transition-behavior",
      "transition-delay",
      "transition-duration",
      "transition-property",
      "transition-timing-function",
      "translate",
      "unicode-bidi",
      "unicode-range",
      "user-select",
      "vertical-align",
      "visibility",
      "white-space",
      "white-space-collapse",
      "widows",
      "width",
      "will-change",
      "word-break",
      "word-spacing",
      "writing-mode",
      "z-index"
    ];
    var alphabetical = /* @__PURE__ */ Object.freeze({
      __proto__: null,
      properties: properties$2
    });
    var properties$1 = [
      "all",
      "display",
      "position",
      "top",
      "right",
      "bottom",
      "left",
      "offset",
      "offset-anchor",
      "offset-distance",
      "offset-path",
      "offset-position",
      "offset-rotate",
      "grid",
      "grid-template-rows",
      "grid-template-columns",
      "grid-template-areas",
      "grid-auto-rows",
      "grid-auto-columns",
      "grid-auto-flow",
      "column-gap",
      "row-gap",
      "grid-area",
      "grid-row",
      "grid-row-start",
      "grid-row-end",
      "grid-column",
      "grid-column-start",
      "grid-column-end",
      "grid-template",
      "flex",
      "flex-grow",
      "flex-shrink",
      "flex-basis",
      "flex-direction",
      "flex-flow",
      "flex-wrap",
      "box-decoration-break",
      "place-content",
      "align-content",
      "justify-content",
      "place-items",
      "align-items",
      "justify-items",
      "place-self",
      "align-self",
      "justify-self",
      "vertical-align",
      "baseline-source",
      "order",
      "float",
      "clear",
      "shape-margin",
      "shape-outside",
      "shape-image-threshold",
      "orphans",
      "gap",
      "columns",
      "column-fill",
      "column-rule",
      "column-rule-width",
      "column-rule-style",
      "column-rule-color",
      "column-width",
      "column-span",
      "column-count",
      "break-before",
      "break-after",
      "break-inside",
      "page",
      "page-break-before",
      "page-break-after",
      "page-break-inside",
      "transform",
      "transform-box",
      "transform-origin",
      "transform-style",
      "translate",
      "rotate",
      "scale",
      "perspective",
      "perspective-origin",
      "appearance",
      "visibility",
      "content-visibility",
      "opacity",
      "z-index",
      "paint-order",
      "mix-blend-mode",
      "backface-visibility",
      "backdrop-filter",
      "clip-path",
      "mask",
      "mask-border",
      "mask-border-outset",
      "mask-border-repeat",
      "mask-border-slice",
      "mask-border-source",
      "mask-border-width",
      "mask-image",
      "mask-mode",
      "mask-position",
      "mask-size",
      "mask-repeat",
      "mask-origin",
      "mask-clip",
      "mask-composite",
      "mask-type",
      "filter",
      "animation",
      "animation-composition",
      "animation-duration",
      "animation-timing-function",
      "animation-delay",
      "animation-iteration-count",
      "animation-direction",
      "animation-fill-mode",
      "animation-play-state",
      "animation-name",
      "transition",
      "transition-behavior",
      "transition-delay",
      "transition-duration",
      "transition-property",
      "transition-timing-function",
      "will-change",
      "counter-increment",
      "counter-reset",
      "counter-set",
      "cursor",
      "box-sizing",
      "contain",
      "contain-intrinsic-height",
      "contain-intrinsic-size",
      "contain-intrinsic-width",
      "container",
      "container-name",
      "container-type",
      "margin",
      "margin-top",
      "margin-right",
      "margin-bottom",
      "margin-left",
      "margin-inline",
      "margin-inline-start",
      "margin-inline-end",
      "margin-block",
      "margin-block-start",
      "margin-block-end",
      "inset",
      "inset-block",
      "inset-block-end",
      "inset-block-start",
      "inset-inline",
      "inset-inline-end",
      "inset-inline-start",
      "outline",
      "outline-color",
      "outline-style",
      "outline-width",
      "outline-offset",
      "box-shadow",
      "border",
      "border-top",
      "border-right",
      "border-bottom",
      "border-left",
      "border-width",
      "border-top-width",
      "border-right-width",
      "border-bottom-width",
      "border-left-width",
      "border-style",
      "border-top-style",
      "border-right-style",
      "border-bottom-style",
      "border-left-style",
      "border-color",
      "border-top-color",
      "border-right-color",
      "border-bottom-color",
      "border-left-color",
      "border-radius",
      "border-top-right-radius",
      "border-top-left-radius",
      "border-bottom-right-radius",
      "border-bottom-left-radius",
      "border-inline",
      "border-inline-width",
      "border-inline-style",
      "border-inline-color",
      "border-inline-start",
      "border-inline-start-width",
      "border-inline-start-style",
      "border-inline-start-color",
      "border-inline-end",
      "border-inline-end-width",
      "border-inline-end-style",
      "border-inline-end-color",
      "border-block",
      "border-block-width",
      "border-block-style",
      "border-block-color",
      "border-block-start",
      "border-block-start-width",
      "border-block-start-style",
      "border-block-start-color",
      "border-block-end",
      "border-block-end-width",
      "border-block-end-style",
      "border-block-end-color",
      "border-image",
      "border-image-source",
      "border-image-slice",
      "border-image-width",
      "border-image-outset",
      "border-image-repeat",
      "border-collapse",
      "border-spacing",
      "border-start-start-radius",
      "border-start-end-radius",
      "border-end-start-radius",
      "border-end-end-radius",
      "background",
      "background-image",
      "background-position",
      "background-size",
      "background-repeat",
      "background-origin",
      "background-clip",
      "background-attachment",
      "background-color",
      "background-blend-mode",
      "background-position-x",
      "background-position-y",
      "isolation",
      "padding",
      "padding-top",
      "padding-right",
      "padding-bottom",
      "padding-left",
      "padding-inline",
      "padding-inline-start",
      "padding-inline-end",
      "padding-block",
      "padding-block-start",
      "padding-block-end",
      "image-orientation",
      "image-rendering",
      "aspect-ratio",
      "width",
      "min-width",
      "max-width",
      "height",
      "min-height",
      "max-height",
      "-webkit-line-clamp",
      "-webkit-text-fill-color",
      "-webkit-text-stroke",
      "-webkit-text-stroke-color",
      "-webkit-text-stroke-width",
      "inline-size",
      "min-inline-size",
      "max-inline-size",
      "block-size",
      "min-block-size",
      "max-block-size",
      "table-layout",
      "caption-side",
      "empty-cells",
      "overflow",
      "overflow-anchor",
      "overflow-block",
      "overflow-clip-margin",
      "overflow-inline",
      "overflow-x",
      "overflow-y",
      "overscroll-behavior",
      "overscroll-behavior-block",
      "overscroll-behavior-inline",
      "overscroll-behavior-x",
      "overscroll-behavior-y",
      "resize",
      "object-fit",
      "object-position",
      "scroll-behavior",
      "scroll-margin",
      "scroll-margin-block",
      "scroll-margin-block-end",
      "scroll-margin-block-start",
      "scroll-margin-bottom",
      "scroll-margin-inline",
      "scroll-margin-inline-end",
      "scroll-margin-inline-start",
      "scroll-margin-left",
      "scroll-margin-right",
      "scroll-margin-top",
      "scroll-padding",
      "scroll-padding-block",
      "scroll-padding-block-end",
      "scroll-padding-block-start",
      "scroll-padding-bottom",
      "scroll-padding-inline",
      "scroll-padding-inline-end",
      "scroll-padding-inline-start",
      "scroll-padding-left",
      "scroll-padding-right",
      "scroll-padding-top",
      "scroll-snap-align",
      "scroll-snap-stop",
      "scroll-snap-type",
      "scrollbar-color",
      "scrollbar-gutter",
      "scrollbar-width",
      "touch-action",
      "pointer-events",
      "content",
      "quotes",
      "hanging-punctuation",
      "color",
      "color-interpolation",
      "accent-color",
      "print-color-adjust",
      "forced-color-adjust",
      "color-scheme",
      "caret-color",
      "font",
      "font-style",
      "font-variant",
      "font-weight",
      "font-stretch",
      "font-size",
      "size-adjust",
      "line-height",
      "src",
      "font-family",
      "font-display",
      "font-kerning",
      "font-language-override",
      "font-optical-sizing",
      "font-palette",
      "font-size-adjust",
      "font-synthesis",
      "font-synthesis-weight",
      "font-synthesis-style",
      "font-synthesis-small-caps",
      "font-synthesis-position",
      "font-variant-alternates",
      "font-variant-caps",
      "font-variant-east-asian",
      "font-variant-emoji",
      "font-variant-ligatures",
      "font-variant-numeric",
      "font-variant-position",
      "font-variation-settings",
      "font-feature-settings",
      "ascent-override",
      "descent-override",
      "line-gap-override",
      "hyphens",
      "hyphenate-character",
      "letter-spacing",
      "line-break",
      "list-style",
      "list-style-type",
      "list-style-image",
      "list-style-position",
      "writing-mode",
      "direction",
      "unicode-bidi",
      "unicode-range",
      "user-select",
      "ruby-position",
      "math-depth",
      "math-style",
      "text-combine-upright",
      "text-align",
      "text-align-last",
      "text-decoration",
      "text-decoration-line",
      "text-decoration-style",
      "text-decoration-color",
      "text-decoration-thickness",
      "text-decoration-skip-ink",
      "text-emphasis",
      "text-emphasis-style",
      "text-emphasis-color",
      "text-emphasis-position",
      "text-indent",
      "text-justify",
      "text-underline-position",
      "text-underline-offset",
      "text-orientation",
      "text-overflow",
      "text-rendering",
      "text-shadow",
      "text-transform",
      "text-wrap",
      "white-space",
      "white-space-collapse",
      "word-break",
      "word-spacing",
      "overflow-wrap",
      "tab-size",
      "widows"
    ];
    var concentricCss = /* @__PURE__ */ Object.freeze({
      __proto__: null,
      properties: properties$1
    });
    var properties = [
      "all",
      "box-sizing",
      "contain",
      "contain-intrinsic-height",
      "contain-intrinsic-size",
      "contain-intrinsic-width",
      "container",
      "container-name",
      "container-type",
      "display",
      "appearance",
      "visibility",
      "content-visibility",
      "z-index",
      "paint-order",
      "position",
      "top",
      "right",
      "bottom",
      "left",
      "offset",
      "offset-anchor",
      "offset-distance",
      "offset-path",
      "offset-position",
      "offset-rotate",
      "grid",
      "grid-template-rows",
      "grid-template-columns",
      "grid-template-areas",
      "grid-auto-rows",
      "grid-auto-columns",
      "grid-auto-flow",
      "column-gap",
      "row-gap",
      "grid-area",
      "grid-row",
      "grid-row-start",
      "grid-row-end",
      "grid-column",
      "grid-column-start",
      "grid-column-end",
      "grid-template",
      "flex",
      "flex-grow",
      "flex-shrink",
      "flex-basis",
      "flex-direction",
      "flex-flow",
      "flex-wrap",
      "box-decoration-break",
      "place-content",
      "place-items",
      "place-self",
      "align-content",
      "align-items",
      "align-self",
      "justify-content",
      "justify-items",
      "justify-self",
      "order",
      "aspect-ratio",
      "width",
      "min-width",
      "max-width",
      "height",
      "min-height",
      "max-height",
      "-webkit-line-clamp",
      "-webkit-text-fill-color",
      "-webkit-text-stroke",
      "-webkit-text-stroke-color",
      "-webkit-text-stroke-width",
      "inline-size",
      "min-inline-size",
      "max-inline-size",
      "block-size",
      "min-block-size",
      "max-block-size",
      "margin",
      "margin-top",
      "margin-right",
      "margin-bottom",
      "margin-left",
      "margin-inline",
      "margin-inline-start",
      "margin-inline-end",
      "margin-block",
      "margin-block-start",
      "margin-block-end",
      "inset",
      "inset-block",
      "inset-block-end",
      "inset-block-start",
      "inset-inline",
      "inset-inline-end",
      "inset-inline-start",
      "padding",
      "padding-top",
      "padding-right",
      "padding-bottom",
      "padding-left",
      "padding-inline",
      "padding-inline-start",
      "padding-inline-end",
      "padding-block",
      "padding-block-start",
      "padding-block-end",
      "float",
      "clear",
      "overflow",
      "overflow-anchor",
      "overflow-block",
      "overflow-clip-margin",
      "overflow-inline",
      "overflow-x",
      "overflow-y",
      "overscroll-behavior",
      "overscroll-behavior-block",
      "overscroll-behavior-inline",
      "overscroll-behavior-x",
      "overscroll-behavior-y",
      "orphans",
      "gap",
      "columns",
      "column-fill",
      "column-rule",
      "column-rule-color",
      "column-rule-style",
      "column-rule-width",
      "column-span",
      "column-count",
      "column-width",
      "object-fit",
      "object-position",
      "transform",
      "transform-box",
      "transform-origin",
      "transform-style",
      "translate",
      "rotate",
      "scale",
      "border",
      "border-top",
      "border-right",
      "border-bottom",
      "border-left",
      "border-width",
      "border-top-width",
      "border-right-width",
      "border-bottom-width",
      "border-left-width",
      "border-style",
      "border-top-style",
      "border-right-style",
      "border-bottom-style",
      "border-left-style",
      "border-radius",
      "border-top-right-radius",
      "border-top-left-radius",
      "border-bottom-right-radius",
      "border-bottom-left-radius",
      "border-inline",
      "border-inline-color",
      "border-inline-style",
      "border-inline-width",
      "border-inline-start",
      "border-inline-start-color",
      "border-inline-start-style",
      "border-inline-start-width",
      "border-inline-end",
      "border-inline-end-color",
      "border-inline-end-style",
      "border-inline-end-width",
      "border-block",
      "border-block-color",
      "border-block-style",
      "border-block-width",
      "border-block-start",
      "border-block-start-color",
      "border-block-start-style",
      "border-block-start-width",
      "border-block-end",
      "border-block-end-color",
      "border-block-end-style",
      "border-block-end-width",
      "border-color",
      "border-image",
      "border-image-outset",
      "border-image-repeat",
      "border-image-slice",
      "border-image-source",
      "border-image-width",
      "border-top-color",
      "border-right-color",
      "border-bottom-color",
      "border-left-color",
      "border-collapse",
      "border-spacing",
      "border-start-start-radius",
      "border-start-end-radius",
      "border-end-start-radius",
      "border-end-end-radius",
      "outline",
      "outline-color",
      "outline-style",
      "outline-width",
      "outline-offset",
      "backdrop-filter",
      "backface-visibility",
      "background",
      "background-image",
      "background-position",
      "background-size",
      "background-repeat",
      "background-origin",
      "background-clip",
      "background-attachment",
      "background-color",
      "background-blend-mode",
      "background-position-x",
      "background-position-y",
      "box-shadow",
      "isolation",
      "content",
      "quotes",
      "hanging-punctuation",
      "color",
      "color-interpolation",
      "accent-color",
      "print-color-adjust",
      "forced-color-adjust",
      "color-scheme",
      "caret-color",
      "font",
      "font-style",
      "font-variant",
      "font-weight",
      "src",
      "font-stretch",
      "font-size",
      "size-adjust",
      "line-height",
      "font-family",
      "font-display",
      "font-kerning",
      "font-language-override",
      "font-optical-sizing",
      "font-palette",
      "font-size-adjust",
      "font-synthesis",
      "font-synthesis-weight",
      "font-synthesis-style",
      "font-synthesis-small-caps",
      "font-synthesis-position",
      "font-variant-alternates",
      "font-variant-caps",
      "font-variant-east-asian",
      "font-variant-emoji",
      "font-variant-ligatures",
      "font-variant-numeric",
      "font-variant-position",
      "font-variation-settings",
      "font-feature-settings",
      "ascent-override",
      "descent-override",
      "line-gap-override",
      "hyphens",
      "hyphenate-character",
      "letter-spacing",
      "line-break",
      "list-style",
      "list-style-image",
      "list-style-position",
      "list-style-type",
      "direction",
      "text-align",
      "text-align-last",
      "text-decoration",
      "text-decoration-line",
      "text-decoration-style",
      "text-decoration-color",
      "text-decoration-thickness",
      "text-decoration-skip-ink",
      "text-emphasis",
      "text-emphasis-style",
      "text-emphasis-color",
      "text-emphasis-position",
      "text-indent",
      "text-justify",
      "text-underline-position",
      "text-underline-offset",
      "text-orientation",
      "text-overflow",
      "text-rendering",
      "text-shadow",
      "text-transform",
      "text-wrap",
      "vertical-align",
      "baseline-source",
      "white-space",
      "white-space-collapse",
      "word-break",
      "word-spacing",
      "overflow-wrap",
      "animation",
      "animation-composition",
      "animation-duration",
      "animation-timing-function",
      "animation-delay",
      "animation-iteration-count",
      "animation-direction",
      "animation-fill-mode",
      "animation-play-state",
      "animation-name",
      "mix-blend-mode",
      "break-before",
      "break-after",
      "break-inside",
      "page",
      "page-break-before",
      "page-break-after",
      "page-break-inside",
      "caption-side",
      "clip-path",
      "counter-increment",
      "counter-reset",
      "counter-set",
      "cursor",
      "empty-cells",
      "filter",
      "image-orientation",
      "image-rendering",
      "mask",
      "mask-border",
      "mask-border-outset",
      "mask-border-repeat",
      "mask-border-slice",
      "mask-border-source",
      "mask-border-width",
      "mask-clip",
      "mask-composite",
      "mask-image",
      "mask-mode",
      "mask-origin",
      "mask-position",
      "mask-repeat",
      "mask-size",
      "mask-type",
      "opacity",
      "perspective",
      "perspective-origin",
      "pointer-events",
      "resize",
      "scroll-behavior",
      "scroll-margin",
      "scroll-margin-block",
      "scroll-margin-block-end",
      "scroll-margin-block-start",
      "scroll-margin-bottom",
      "scroll-margin-inline",
      "scroll-margin-inline-end",
      "scroll-margin-inline-start",
      "scroll-margin-left",
      "scroll-margin-right",
      "scroll-margin-top",
      "scroll-padding",
      "scroll-padding-block",
      "scroll-padding-block-end",
      "scroll-padding-block-start",
      "scroll-padding-bottom",
      "scroll-padding-inline",
      "scroll-padding-inline-end",
      "scroll-padding-inline-start",
      "scroll-padding-left",
      "scroll-padding-right",
      "scroll-padding-top",
      "scroll-snap-align",
      "scroll-snap-stop",
      "scroll-snap-type",
      "scrollbar-color",
      "scrollbar-gutter",
      "scrollbar-width",
      "shape-image-threshold",
      "shape-margin",
      "shape-outside",
      "tab-size",
      "table-layout",
      "ruby-position",
      "math-depth",
      "math-style",
      "text-combine-upright",
      "touch-action",
      "transition",
      "transition-behavior",
      "transition-delay",
      "transition-duration",
      "transition-property",
      "transition-timing-function",
      "will-change",
      "unicode-bidi",
      "unicode-range",
      "user-select",
      "widows",
      "writing-mode"
    ];
    var smacss = /* @__PURE__ */ Object.freeze({
      __proto__: null,
      properties
    });
    exports2.cssDeclarationSorter = cssDeclarationSorter;
    exports2.default = cssDeclarationSorter;
    module2.exports = cssDeclarationSorter;
  }
});

// node_modules/cssnano-utils/src/rawCache.js
var require_rawCache = __commonJS({
  "node_modules/cssnano-utils/src/rawCache.js"(exports2, module2) {
    "use strict";
    function pluginCreator() {
      return {
        postcssPlugin: "cssnano-util-raw-cache",
        /**
         * @param {import('postcss').Root} css
         * @param {{result: import('postcss').Result & {root: {rawCache?: any}}}} arg
         */
        OnceExit(css, { result }) {
          result.root.rawCache = {
            colon: ":",
            indent: "",
            beforeDecl: "",
            beforeRule: "",
            beforeOpen: "",
            beforeClose: "",
            beforeComment: "",
            after: "",
            emptyBody: "",
            commentLeft: "",
            commentRight: ""
          };
        }
      };
    }
    pluginCreator.postcss = true;
    module2.exports = pluginCreator;
  }
});

// node_modules/cssnano-utils/src/getArguments.js
var require_getArguments = __commonJS({
  "node_modules/cssnano-utils/src/getArguments.js"(exports2, module2) {
    "use strict";
    module2.exports = function getArguments(node) {
      const list = [[]];
      for (const child of node.nodes) {
        if (child.type !== "div") {
          list[list.length - 1].push(child);
        } else {
          list.push([]);
        }
      }
      return list;
    };
  }
});

// node_modules/cssnano-utils/src/sameParent.js
var require_sameParent = __commonJS({
  "node_modules/cssnano-utils/src/sameParent.js"(exports2, module2) {
    "use strict";
    function checkMatch(nodeA, nodeB) {
      if (nodeA.type === "atrule" && nodeB.type === "atrule") {
        return nodeA.params === nodeB.params && nodeA.name.toLowerCase() === nodeB.name.toLowerCase();
      }
      return nodeA.type === nodeB.type;
    }
    function sameParent(nodeA, nodeB) {
      if (!nodeA.parent) {
        return !nodeB.parent;
      }
      if (!nodeB.parent) {
        return false;
      }
      if (!checkMatch(nodeA.parent, nodeB.parent)) {
        return false;
      }
      return sameParent(nodeA.parent, nodeB.parent);
    }
    module2.exports = sameParent;
  }
});

// node_modules/cssnano-utils/src/index.js
var require_src2 = __commonJS({
  "node_modules/cssnano-utils/src/index.js"(exports2, module2) {
    "use strict";
    var rawCache = require_rawCache();
    var getArguments = require_getArguments();
    var sameParent = require_sameParent();
    module2.exports = { rawCache, getArguments, sameParent };
  }
});

// node_modules/cssnano-preset-default/src/index.js
var require_src3 = __commonJS({
  "node_modules/cssnano-preset-default/src/index.js"(exports2, module2) {
    "use strict";
    var cssDeclarationSorter = require_main();
    var postcssDiscardComments = require("postcss-discard-comments");
    var postcssReduceInitial = require("postcss-reduce-initial");
    var postcssMinifyGradients = require("postcss-minify-gradients");
    var postcssSvgo = require("postcss-svgo");
    var postcssReduceTransforms = require("postcss-reduce-transforms");
    var postcssConvertValues = require("postcss-convert-values");
    var postcssCalc = require("postcss-calc");
    var postcssColormin = require("postcss-colormin");
    var postcssOrderedValues = require("postcss-ordered-values");
    var postcssMinifySelectors = require("postcss-minify-selectors");
    var postcssMinifyParams = require("postcss-minify-params");
    var postcssNormalizeCharset = require("postcss-normalize-charset");
    var postcssMinifyFontValues = require("postcss-minify-font-values");
    var postcssNormalizeUrl = require("postcss-normalize-url");
    var postcssMergeLonghand = require("postcss-merge-longhand");
    var postcssDiscardDuplicates = require("postcss-discard-duplicates");
    var postcssDiscardOverridden = require("postcss-discard-overridden");
    var postcssNormalizeRepeatStyle = require("postcss-normalize-repeat-style");
    var postcssMergeRules = require("postcss-merge-rules");
    var postcssDiscardEmpty = require("postcss-discard-empty");
    var postcssUniqueSelectors = require("postcss-unique-selectors");
    var postcssNormalizeString = require("postcss-normalize-string");
    var postcssNormalizePositions = require("postcss-normalize-positions");
    var postcssNormalizeWhitespace = require("postcss-normalize-whitespace");
    var postcssNormalizeUnicode = require("postcss-normalize-unicode");
    var postcssNormalizeDisplayValues = require("postcss-normalize-display-values");
    var postcssNormalizeTimingFunctions = require("postcss-normalize-timing-functions");
    var { rawCache } = require_src2();
    function configurePlugins(plugins, opts = {}) {
      const { overrideBrowserslist, stats, env, path } = opts;
      const sharedProps = {
        overrideBrowserslist,
        stats,
        env,
        path
      };
      const defaults = {
        colormin: {
          ...sharedProps
        },
        convertValues: {
          length: false,
          ...sharedProps
        },
        mergeRules: {
          ...sharedProps
        },
        minifyParams: {
          ...sharedProps
        },
        normalizeCharset: {
          add: false
        },
        normalizeUnicode: {
          ...sharedProps
        },
        reduceInitial: {
          ...sharedProps
        },
        cssDeclarationSorter: {
          keepOverrides: true
        },
        svgo: {
          plugins: [
            {
              name: "preset-default",
              params: {
                overrides: {
                  removeViewBox: false,
                  removeTitle: false
                }
              }
            }
          ]
        }
      };
      return plugins.map(([plugin, opt]) => {
        var _a, _b;
        const defaultProps = (_a = defaults[opt]) != null ? _a : {};
        const presetProps = (_b = opts[opt]) != null ? _b : {};
        return [
          plugin,
          presetProps !== false ? { ...defaultProps, ...presetProps } : { exclude: true }
        ];
      });
    }
    function defaultPreset(opts = {}) {
      return {
        plugins: configurePlugins(
          [
            [postcssDiscardComments, "discardComments"],
            [postcssMinifyGradients, "minifyGradients"],
            [postcssReduceInitial, "reduceInitial"],
            [postcssSvgo, "svgo"],
            [postcssNormalizeDisplayValues, "normalizeDisplayValues"],
            [postcssReduceTransforms, "reduceTransforms"],
            [postcssColormin, "colormin"],
            [postcssNormalizeTimingFunctions, "normalizeTimingFunctions"],
            [postcssCalc, "calc"],
            [postcssConvertValues, "convertValues"],
            [postcssOrderedValues, "orderedValues"],
            [postcssMinifySelectors, "minifySelectors"],
            [postcssMinifyParams, "minifyParams"],
            [postcssNormalizeCharset, "normalizeCharset"],
            [postcssDiscardOverridden, "discardOverridden"],
            [postcssNormalizeString, "normalizeString"],
            [postcssNormalizeUnicode, "normalizeUnicode"],
            [postcssMinifyFontValues, "minifyFontValues"],
            [postcssNormalizeUrl, "normalizeUrl"],
            [postcssNormalizeRepeatStyle, "normalizeRepeatStyle"],
            [postcssNormalizePositions, "normalizePositions"],
            [postcssNormalizeWhitespace, "normalizeWhitespace"],
            [postcssMergeLonghand, "mergeLonghand"],
            [postcssDiscardDuplicates, "discardDuplicates"],
            [postcssMergeRules, "mergeRules"],
            [postcssDiscardEmpty, "discardEmpty"],
            [postcssUniqueSelectors, "uniqueSelectors"],
            [cssDeclarationSorter, "cssDeclarationSorter"],
            [rawCache, "rawCache"]
          ],
          opts
        )
      };
    }
    module2.exports = defaultPreset;
  }
});

// node_modules/cssnano/src/index.js
var require_src4 = __commonJS({
  "node_modules/cssnano/src/index.js"(exports2, module2) {
    "use strict";
    var path = require("path");
    var postcss = require("postcss");
    var { lilconfigSync } = require_src();
    var cssnano2 = "cssnano";
    function isResolvable(moduleId) {
      try {
        require.resolve(moduleId);
        return true;
      } catch (e) {
        return false;
      }
    }
    function resolvePreset(preset) {
      let fn, options;
      if (Array.isArray(preset)) {
        fn = preset[0];
        options = preset[1];
      } else {
        fn = preset;
        options = {};
      }
      if (fn.plugins) {
        return fn.plugins;
      }
      if (fn === "default") {
        return require_src3()(options).plugins;
      }
      if (typeof fn === "function") {
        return fn(options).plugins;
      }
      if (isResolvable(fn)) {
        return require(fn)(options).plugins;
      }
      const sugar = `cssnano-preset-${fn}`;
      if (isResolvable(sugar)) {
        return require(sugar)(options).plugins;
      }
      throw new Error(
        `Cannot load preset "${fn}". Please check your configuration for errors and try again.`
      );
    }
    function resolveConfig(options) {
      if (options.preset) {
        return resolvePreset(options.preset);
      }
      let searchPath = process.cwd();
      let configPath = void 0;
      if (options.configFile) {
        searchPath = void 0;
        configPath = path.resolve(process.cwd(), options.configFile);
      }
      const configExplorer = lilconfigSync(cssnano2, {
        searchPlaces: [
          "package.json",
          ".cssnanorc",
          ".cssnanorc.json",
          ".cssnanorc.js",
          "cssnano.config.js"
        ]
      });
      const config = configPath ? configExplorer.load(configPath) : configExplorer.search(searchPath);
      if (config === null) {
        return resolvePreset("default");
      }
      return resolvePreset(config.config.preset || config.config);
    }
    function cssnanoPlugin(options = {}) {
      if (Array.isArray(options.plugins)) {
        if (!options.preset || !options.preset.plugins) {
          options.preset = { plugins: [] };
        }
        options.plugins.forEach((plugin) => {
          if (Array.isArray(plugin)) {
            const [pluginDef, opts = {}] = plugin;
            if (typeof pluginDef === "string" && isResolvable(pluginDef)) {
              options.preset.plugins.push([require(pluginDef), opts]);
            } else {
              options.preset.plugins.push([pluginDef, opts]);
            }
          } else if (typeof plugin === "string" && isResolvable(plugin)) {
            options.preset.plugins.push([require(plugin), {}]);
          } else {
            options.preset.plugins.push([plugin, {}]);
          }
        });
      }
      const plugins = [];
      const nanoPlugins = resolveConfig(options);
      for (const nanoPlugin of nanoPlugins) {
        if (Array.isArray(nanoPlugin)) {
          const [processor, opts] = nanoPlugin;
          if (typeof opts === "undefined" || typeof opts === "object" && !opts.exclude || typeof opts === "boolean" && opts === true) {
            plugins.push(processor(opts));
          }
        } else {
          plugins.push(nanoPlugin);
        }
      }
      return postcss(plugins);
    }
    cssnanoPlugin.postcss = true;
    module2.exports = cssnanoPlugin;
  }
});

// packages/lit-css/lit-css.ts
var lit_css_exports = {};
__export(lit_css_exports, {
  transform: () => transform
});
module.exports = __toCommonJS(lit_css_exports);
var import_cssnano = __toESM(require_src4(), 1);
function stringToTemplateLiteral(x = "") {
  x = `${x}`;
  const escaped = x.replace(/\\|`|\$(?={)|(?<=<)\//g, (y) => `\\${y}`);
  return `\`${escaped}\``;
}
async function cssnanoify(css, options) {
  const cssnanoOptions = typeof options === "object" ? options : void 0;
  const result = await (0, import_cssnano.default)(cssnanoOptions).process(css);
  return result.css;
}
async function transform({
  css: source,
  filePath,
  specifier = "lit",
  tag = "css",
  cssnano: cssnano2 = false,
  transform: transform2 = (x) => x
}) {
  const css = await transform2(source, { filePath });
  const cssContent = cssnano2 ? await cssnanoify(css, cssnano2) : css;
  return `import {${tag}} from '${specifier}';
export const styles = ${tag}${stringToTemplateLiteral(cssContent)};
export default styles;
`;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  transform
});
/*! Bundled license information:

cssnano-preset-default/src/index.js:
  (**
   * @author Ben Briggs
   * @license MIT
   * @module cssnano:preset:default
   * @overview
   *
   * This default preset for cssnano only includes transforms that make no
   * assumptions about your CSS other than what is passed in. In previous
   * iterations of cssnano, assumptions were made about your CSS which caused
   * output to look different in certain use cases, but not others. These
   * transforms have been moved from the defaults to other presets, to make
   * this preset require only minimal configuration.
   *)
*/
//# sourceMappingURL=lit-css.cjs.map
